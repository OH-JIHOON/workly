name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'shared/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'shared/**'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: workly_test
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm run build:shared

    - name: Lint
      run: npm run lint:backend

    - name: Test
      run: npm run test:backend
      env:
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DATABASE_NAME: workly_test
        DATABASE_USERNAME: test_user
        DATABASE_PASSWORD: test_password
        JWT_SECRET: test-jwt-secret

    - name: E2E Test
      run: npm run test:e2e --workspace=backend
      env:
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DATABASE_NAME: workly_test
        DATABASE_USERNAME: test_user
        DATABASE_PASSWORD: test_password
        JWT_SECRET: test-jwt-secret

    - name: Build
      run: npm run build:backend

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: npm audit --workspace=backend

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=backend/package.json

  build-and-deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm run build:shared

    - name: Build
      run: npm run build:backend

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Build Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker build -t workly-backend ./backend
        docker tag workly-backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/workly-backend:latest

    - name: Login to Amazon ECR
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Push to ECR
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/workly-backend:latest

    - name: Deploy to ECS
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        aws ecs update-service --cluster workly-cluster --service workly-backend --force-new-deployment