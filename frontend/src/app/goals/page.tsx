'use client'

export const dynamic = 'force-dynamic'

import { useState, useEffect } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { 
  PlusIcon, 
  FlagIcon, 
  CheckCircleIcon, 
  ClockIcon, 
  ChartBarIcon,
  CalendarIcon,
  UsersIcon
} from '@heroicons/react/24/outline'
import Header from '@/components/layout/Header'
import MainContainer from '@/components/layout/MainContainer'
import FilterManager from '@/components/ui/FilterManager'
import WorklyFloatingActionButton from '@/components/ui/WorklyFloatingActionButton'
import LoginBanner from '@/components/ui/LoginBanner'
import { isAuthenticated } from '@/lib/auth'
import { 
  Goal, 
  GoalStatus, 
  GoalPriority, 
  GoalType, 
  GoalTimeframe,
  CreateGoalDto 
} from '@/shared/types/goal.types'

// Î™©ÏóÖ Î™©Ìëú Îç∞Ïù¥ÌÑ∞
const mockGoals: Goal[] = [
  {
    id: '1',
    title: 'ÏõåÌÅ¥Î¶¨ ÌîåÎû´Ìèº ÏôÑÏÑ±',
    description: 'ÏÇ¨Ïö©ÏûêÎì§Ïù¥ Î™©ÌëúÎ•º Ìö®Í≥ºÏ†ÅÏúºÎ°ú Í¥ÄÎ¶¨Ìï† Ïàò ÏûàÎäî ÌîåÎû´Ìèº Íµ¨Ï∂ï',
    status: GoalStatus.ACTIVE,
    priority: GoalPriority.HIGH,
    type: GoalType.ORGANIZATIONAL,
    timeframe: GoalTimeframe.MEDIUM_TERM,
    startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
    targetDate: new Date(Date.now() + 150 * 24 * 60 * 60 * 1000).toISOString(),
    progress: 75,
    metrics: [
      {
        id: 'm1',
        name: 'ÏÇ¨Ïö©Ïûê Îì±Î°ù Ïàò',
        targetValue: 1000,
        currentValue: 750,
        unit: 'Î™Ö',
        description: 'Î≤†ÌÉÄ ÌÖåÏä§Ìä∏ ÏÇ¨Ïö©Ïûê ÌôïÎ≥¥'
      },
      {
        id: 'm2',
        name: 'Í∏∞Îä• ÏôÑÏÑ±ÎèÑ',
        targetValue: 100,
        currentValue: 85,
        unit: '%',
        description: 'ÌïµÏã¨ Í∏∞Îä• Í∞úÎ∞ú ÏôÑÎ£å'
      }
    ],
    tags: ['ÌîåÎû´Ìèº', 'MVP', 'ÏÇ¨ÏóÖ'],
    color: '#3B82F6',
    icon: 'üöÄ',
    ownerId: 'user1',
    owner: { id: 'user1', name: 'ÍπÄÏõåÌÅ¥Î¶¨', email: 'workly@example.com' },
    projectCount: 3,
    completedProjectCount: 2,
    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date().toISOString(),
    isOverdue: false,
    isDueSoon: false
  },
  {
    id: '2',
    title: 'Í∞úÏù∏ Ïó≠Îüâ Í∞ïÌôî',
    description: 'ÏÉàÎ°úÏö¥ Í∏∞Ïà† Ïä§ÌÉù ÏäµÎìù Î∞è Ï†ÑÎ¨∏ÏÑ± Ìñ•ÏÉÅ',
    status: GoalStatus.ACTIVE,
    priority: GoalPriority.MEDIUM,
    type: GoalType.PERSONAL,
    timeframe: GoalTimeframe.LONG_TERM,
    startDate: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
    targetDate: new Date(Date.now() + 300 * 24 * 60 * 60 * 1000).toISOString(),
    progress: 45,
    metrics: [
      {
        id: 'm3',
        name: 'ÌïôÏäµ ÏãúÍ∞Ñ',
        targetValue: 200,
        currentValue: 90,
        unit: 'ÏãúÍ∞Ñ',
        description: 'Ïò®ÎùºÏù∏ Í∞ïÏùò Î∞è Ïã§Ïäµ'
      }
    ],
    tags: ['ÌïôÏäµ', 'Ïó≠ÎüâÍ∞úÎ∞ú', 'Í∞úÏù∏ÏÑ±Ïû•'],
    color: '#10B981',
    icon: 'üìö',
    ownerId: 'user1',
    owner: { id: 'user1', name: 'ÍπÄÏõåÌÅ¥Î¶¨', email: 'workly@example.com' },
    projectCount: 2,
    completedProjectCount: 0,
    createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date().toISOString(),
    isOverdue: false,
    isDueSoon: false
  },
  {
    id: '3',
    title: 'Í±¥Í∞ïÌïú ÎùºÏù¥ÌîÑ Ïä§ÌÉÄÏùº',
    description: 'Í∑úÏπôÏ†ÅÏù∏ Ïö¥ÎèôÍ≥º Í±¥Í∞ïÌïú ÏãùÏäµÍ¥Ä Ïú†ÏßÄ',
    status: GoalStatus.COMPLETED,
    priority: GoalPriority.HIGH,
    type: GoalType.PERSONAL,
    timeframe: GoalTimeframe.SHORT_TERM,
    startDate: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
    targetDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
    completedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
    progress: 100,
    metrics: [
      {
        id: 'm4',
        name: 'Ïö¥Îèô ÏùºÏàò',
        targetValue: 60,
        currentValue: 65,
        unit: 'Ïùº',
        description: '3Í∞úÏõîÍ∞Ñ Ïö¥Îèô ÏßÄÏÜç'
      }
    ],
    tags: ['Í±¥Í∞ï', 'Ïö¥Îèô', 'ÏäµÍ¥Ä'],
    color: '#8B5CF6',
    icon: 'üí™',
    ownerId: 'user1',
    owner: { id: 'user1', name: 'ÍπÄÏõåÌÅ¥Î¶¨', email: 'workly@example.com' },
    projectCount: 1,
    completedProjectCount: 1,
    createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),
    updatedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
    isOverdue: false,
    isDueSoon: false
  }
]

// Î™©Ìëú Ïπ¥Îìú Ïª¥Ìè¨ÎÑåÌä∏
function GoalCard({ goal, onClick }: { goal: Goal; onClick: () => void }) {
  const getStatusColor = (status: GoalStatus) => {
    switch (status) {
      case GoalStatus.ACTIVE: return 'text-blue-600 bg-blue-100'
      case GoalStatus.COMPLETED: return 'text-green-600 bg-green-100'
      case GoalStatus.ON_HOLD: return 'text-yellow-600 bg-yellow-100'
      case GoalStatus.CANCELLED: return 'text-red-600 bg-red-100'
      default: return 'text-gray-600 bg-gray-100'
    }
  }

  const getStatusLabel = (status: GoalStatus) => {
    switch (status) {
      case GoalStatus.ACTIVE: return 'ÏßÑÌñâ Ï§ë'
      case GoalStatus.COMPLETED: return 'ÏôÑÎ£å'
      case GoalStatus.ON_HOLD: return 'Î≥¥Î•ò'
      case GoalStatus.CANCELLED: return 'Ï∑®ÏÜå'
      case GoalStatus.DRAFT: return 'Ï¥àÏïà'
      default: return 'Ïïå Ïàò ÏóÜÏùå'
    }
  }

  const getPriorityColor = (priority: GoalPriority) => {
    switch (priority) {
      case GoalPriority.URGENT: return 'text-red-600'
      case GoalPriority.HIGH: return 'text-orange-600'
      case GoalPriority.MEDIUM: return 'text-blue-600'
      case GoalPriority.LOW: return 'text-gray-600'
      default: return 'text-gray-600'
    }
  }

  return (
    <div 
      className="p-6 hover:bg-gray-50 transition-all duration-200 cursor-pointer group border-l-4"
      style={{ borderLeftColor: goal.color }}
      onClick={onClick}
    >
      {/* Î™©Ìëú Ìó§Îçî */}
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-center space-x-3 flex-1">
          <div 
            className="w-12 h-12 rounded-lg flex items-center justify-center text-white font-semibold text-lg"
            style={{ backgroundColor: goal.color }}
          >
            {goal.icon}
          </div>
          <div className="flex-1">
            <div className="flex items-center space-x-2 mb-1">
              <h3 className="font-semibold text-gray-900 group-hover:text-gray-700">
                {goal.title}
              </h3>
              <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(goal.status)}`}>
                {getStatusLabel(goal.status)}
              </span>
            </div>
            <p className="text-sm text-gray-500 line-clamp-2">{goal.description}</p>
          </div>
        </div>
        <div className={`text-sm font-medium ${getPriorityColor(goal.priority)}`}>
          {goal.priority.toUpperCase()}
        </div>
      </div>

      {/* ÏßÑÌñâÎ•† */}
      <div className="mb-4">
        <div className="flex items-center justify-between text-sm mb-2">
          <span className="text-gray-600">Î™©Ìëú Îã¨ÏÑ±Î•†</span>
          <span className="font-medium">{goal.progress}%</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div 
            className="h-2 rounded-full transition-all duration-300"
            style={{ 
              width: `${goal.progress}%`,
              backgroundColor: goal.color 
            }}
          />
        </div>
      </div>

      {/* Î©îÌä∏Î¶≠ Ï†ïÎ≥¥ */}
      {goal.metrics.length > 0 && (
        <div className="mb-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {goal.metrics.slice(0, 2).map((metric) => (
              <div key={metric.id} className="bg-gray-50 rounded-lg p-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">{metric.name}</span>
                  <span className="text-sm font-medium">
                    {metric.currentValue}/{metric.targetValue} {metric.unit}
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-1 mt-2">
                  <div 
                    className="h-1 rounded-full bg-blue-500 transition-all duration-300"
                    style={{ width: `${Math.min((metric.currentValue / metric.targetValue) * 100, 100)}%` }}
                  />
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* ÌîÑÎ°úÏ†ùÌä∏ Î∞è ÏùºÏ†ï Ï†ïÎ≥¥ */}
      <div className="flex items-center justify-between text-sm text-gray-500">
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-1">
            <UsersIcon className="w-4 h-4" />
            <span>{goal.completedProjectCount}/{goal.projectCount} ÌîÑÎ°úÏ†ùÌä∏</span>
          </div>
          {goal.targetDate && (
            <div className="flex items-center space-x-1">
              <CalendarIcon className="w-4 h-4" />
              <span>
                {new Date(goal.targetDate).toLocaleDateString('ko-KR')}ÍπåÏßÄ
              </span>
            </div>
          )}
        </div>
        <div className="flex items-center space-x-1">
          <ChartBarIcon className="w-4 h-4 text-green-600" />
          <span className="text-green-600">ÏàúÏ°∞Î°≠Í≤å ÏßÑÌñâ</span>
        </div>
      </div>

      {/* ÌÉúÍ∑∏ */}
      {goal.tags.length > 0 && (
        <div className="flex flex-wrap gap-1 mt-3">
          {goal.tags.slice(0, 3).map((tag, index) => (
            <span
              key={index}
              className="inline-block px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full"
            >
              {tag}
            </span>
          ))}
          {goal.tags.length > 3 && (
            <span className="inline-block px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-full">
              +{goal.tags.length - 3}
            </span>
          )}
        </div>
      )}
    </div>
  )
}

export default function GoalsPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const [goals, setGoals] = useState<Goal[]>(mockGoals)
  const [isLoading, setIsLoading] = useState(false)
  const [activeFilter, setActiveFilter] = useState('Ï†ÑÏ≤¥ Î™©Ìëú')
  const [isLoggedIn, setIsLoggedIn] = useState(false)

  // ÌïÑÌÑ∞ ÏÑ§Ï†ï ÏÉÅÌÉú
  const [showOnlyMyGoals, setShowOnlyMyGoals] = useState(false)
  const [goalSortOrder, setGoalSortOrder] = useState('progress')
  const [progressRange, setProgressRange] = useState<[number, number]>([0, 100])
  const [timeframeFilter, setTimeframeFilter] = useState<string[]>([])
  const [statusFilter, setStatusFilter] = useState('all')

  // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    setIsLoggedIn(isAuthenticated())
  }, [])

  // Í∏∞Î≥∏ ÌïÑÌÑ∞ Ïπ©Îì§
  const defaultChips = [
    { 
      id: 'all',
      label: 'Ï†ÑÏ≤¥ Î™©Ìëú', 
      isDefault: true,
      conditions: [],
      count: goals.length,
      icon: <FlagIcon className="w-4 h-4" />,
      color: 'gray' as const
    },
    { 
      id: 'active',
      label: 'ÏßÑÌñâ Ï§ë', 
      isDefault: true,
      conditions: [{ key: 'status', operator: 'equals' as const, value: GoalStatus.ACTIVE, label: 'ÏÉÅÌÉú: ÏßÑÌñâ Ï§ë' }],
      count: goals.filter(g => g.status === GoalStatus.ACTIVE).length,
      icon: <ClockIcon className="w-4 h-4" />,
      color: 'blue' as const
    },
    { 
      id: 'completed',
      label: 'ÏôÑÎ£åÎê®', 
      isDefault: true,
      conditions: [{ key: 'status', operator: 'equals' as const, value: GoalStatus.COMPLETED, label: 'ÏÉÅÌÉú: ÏôÑÎ£å' }],
      count: goals.filter(g => g.status === GoalStatus.COMPLETED).length,
      icon: <CheckCircleIcon className="w-4 h-4" />,
      color: 'green' as const
    },
    { 
      id: 'high-priority',
      label: 'Ï§ëÏöî Î™©Ìëú', 
      isDefault: true,
      conditions: [{ key: 'priority', operator: 'in' as const, value: [GoalPriority.HIGH, GoalPriority.URGENT], label: 'Ïö∞ÏÑ†ÏàúÏúÑ: ÎÜíÏùå+Í∏¥Í∏â' }],
      count: goals.filter(g => g.priority === GoalPriority.HIGH || g.priority === GoalPriority.URGENT).length,
      icon: <ChartBarIcon className="w-4 h-4" />,
      color: 'orange' as const
    },
  ]

  // ÌïÑÌÑ∞ÎßÅÎêú Î™©Ìëú Î™©Î°ù
  const filteredGoals = goals.filter(goal => {
    switch (activeFilter) {
      case 'ÏßÑÌñâ Ï§ë':
        return goal.status === GoalStatus.ACTIVE
      case 'ÏôÑÎ£åÎê®':
        return goal.status === GoalStatus.COMPLETED
      case 'Ï§ëÏöî Î™©Ìëú':
        return goal.priority === GoalPriority.HIGH || goal.priority === GoalPriority.URGENT
      case 'Ï†ÑÏ≤¥ Î™©Ìëú':
      default:
        return true
    }
  })


  const handleGoalClick = (goal: Goal) => {
    router.push(`/goals/${goal.id}`)
  }

  return (
    <div className="min-h-screen bg-gray-50 pb-20">
      {/* Ìó§Îçî */}
      <Header title="Î™©Ìëú" />
      
      {/* Î°úÍ∑∏Ïù∏ Î∞∞ÎÑà (Ìó§Îçî Î∞îÍπ•) */}
      <LoginBanner />
      
      {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† */}
      <MainContainer>
        {/* ÌïÑÌÑ∞ Í¥ÄÎ¶¨Ïûê - Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©ÏûêÎßå ÌëúÏãú */}
        {isLoggedIn && (
          <div className="mb-0">
            <FilterManager
            defaultChips={defaultChips}
            activeChipId={activeFilter}
            onChipChange={setActiveFilter}
            settingsTitle="Î™©Ìëú ÌïÑÌÑ∞ ÏÑ§Ï†ï"
            settings={[
              {
                key: 'myOnly',
                label: 'ÎÇ¥ Î™©ÌëúÎßå',
                type: 'toggle',
                value: showOnlyMyGoals,
                onChange: setShowOnlyMyGoals
              },
              {
                key: 'progress',
                label: 'Îã¨ÏÑ±Î•† Î≤îÏúÑ',
                type: 'range',
                value: progressRange,
                onChange: setProgressRange
              },
              {
                key: 'timeframe',
                label: 'ÏãúÍ∞Ñ Î≤îÏúÑ',
                type: 'tag-selector',
                value: timeframeFilter,
                options: ['short_term', 'medium_term', 'long_term'],
                onChange: setTimeframeFilter
              },
              {
                key: 'status',
                label: 'ÏÉÅÌÉú',
                type: 'select',
                value: statusFilter,
                options: ['all', 'active', 'completed', 'on_hold'],
                onChange: setStatusFilter
              },
              {
                key: 'sort',
                label: 'Ï†ïÎ†¨ Í∏∞Ï§Ä',
                type: 'select',
                value: goalSortOrder,
                options: ['progress', 'deadline', 'priority', 'created'],
                onChange: setGoalSortOrder
              }
            ]}
            getChipCount={(conditions) => {
              let filteredGoals = goals
              
              conditions.forEach(condition => {
                switch (condition.key) {
                  case 'status':
                    filteredGoals = filteredGoals.filter(g => g.status === condition.value)
                    break
                  case 'priority':
                    if (Array.isArray(condition.value)) {
                      filteredGoals = filteredGoals.filter(g => condition.value.includes(g.priority))
                    }
                    break
                }
              })
              
              return filteredGoals.length
            }}
            />
          </div>
        )}

        {/* Î™©Ìëú Î™©Î°ù */}
        <div className="bg-white border border-gray-200 overflow-hidden">
          {isLoading ? (
            <div className="p-8 text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto"></div>
              <p className="text-gray-500 mt-2">Î™©ÌëúÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
            </div>
          ) : filteredGoals.length === 0 ? (
            <div className="p-8 text-center">
              <FlagIcon className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-600 mb-1">Î™©ÌëúÍ∞Ä ÏóÜÏäµÎãàÎã§</h3>
              <p className="text-gray-500 text-sm mb-4">Ïö∞Ï∏° ÌïòÎã®Ïùò ÏàòÏßëÌï® Î≤ÑÌäº(+)ÏùÑ ÎàåÎü¨ Î™©ÌëúÎ•º Ï∂îÍ∞ÄÌï¥Î≥¥ÏÑ∏Ïöî!</p>
            </div>
          ) : (
            <div className="divide-y divide-gray-100">
              {filteredGoals.map((goal) => (
                <GoalCard
                  key={goal.id}
                  goal={goal}
                  onClick={() => handleGoalClick(goal)}
                />
              ))}
            </div>
          )}
        </div>
      </MainContainer>
      
      {/* ÏõåÌÅ¥Î¶¨ ÌîåÎ°úÌåÖ Ïï°ÏÖò Î≤ÑÌäº */}
      <WorklyFloatingActionButton 
        onTaskCreated={(task) => {
          console.log('CPER ÏóÖÎ¨¥ ÏÉùÏÑ±:', task)
          // TODO: Î™©Ìëú Í¥ÄÎ†® ÏóÖÎ¨¥ ÏÉùÏÑ± Î°úÏßÅ Íµ¨ÌòÑ
        }}
        onInboxItemCreated={(inboxItem) => {
          console.log('Îπ†Î•∏ ÏàòÏßë:', inboxItem)
          // TODO: Î™©Ìëú Í¥ÄÎ†® ÏïÑÏù¥ÎîîÏñ¥ ÏàòÏßë Î°úÏßÅ Íµ¨ÌòÑ
        }}
      />
    </div>
  )
}