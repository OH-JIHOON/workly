{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Monorepo & CI/CD Pipeline",
        "description": "Set up the monorepo structure for frontend (Next.js) and backend (NestJS), configure Docker for development and production environments, and establish CI/CD pipelines (e.g., GitHub Actions) for automated testing and deployment.",
        "details": "Frontend: Next.js 14+ (App Router), TypeScript, Tailwind CSS. Backend: NestJS, TypeScript. Infrastructure: Docker, Docker Compose. CI/CD: Automated build, test, and deployment workflows.",
        "testStrategy": "Verify successful Docker container builds, local environment setup, and initial CI/CD pipeline runs for both frontend and backend.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Monorepo Structure",
            "description": "Set up the foundational monorepo workspace using a tool like Turborepo or Nx, defining separate applications for Next.js frontend and NestJS backend, and configuring shared tooling.",
            "dependencies": [],
            "details": "Configure `package.json` at the root, create `apps/frontend` and `apps/backend` directories, add basic configuration files for each application (e.g., `tsconfig.json`), and set up a monorepo manager (e.g., Turborepo).",
            "status": "pending",
            "testStrategy": "Verify that `pnpm install` (or npm/yarn) runs successfully at the root, and that both frontend and backend applications can be started independently using monorepo commands (e.g., `pnpm dev`)."
          },
          {
            "id": 2,
            "title": "Dockerize Development Environment",
            "description": "Create Dockerfiles and Docker Compose configurations for both the Next.js frontend and NestJS backend to enable a consistent and isolated local development environment.",
            "dependencies": [],
            "details": "Develop `Dockerfile.dev` for Next.js and NestJS, and a `docker-compose.dev.yml` to orchestrate services, including hot-reloading and volume mounts for code changes.",
            "status": "pending",
            "testStrategy": "Verify that `docker-compose -f docker-compose.dev.yml up` successfully builds and runs both frontend and backend containers, and that applications are accessible locally with live code changes reflected."
          },
          {
            "id": 3,
            "title": "Dockerize Production Environment",
            "description": "Optimize Dockerfiles for production environments, focusing on smaller image sizes and efficient builds for both Next.js and NestJS applications.",
            "dependencies": [],
            "details": "Create multi-stage `Dockerfile`s for Next.js and NestJS, ensuring minimal dependencies, optimized layers, and production-ready configurations.",
            "status": "pending",
            "testStrategy": "Verify that production Docker images can be built successfully using `docker build -f Dockerfile -t <image-name> .` for both apps, and confirm image sizes are optimized."
          },
          {
            "id": 4,
            "title": "Implement CI/CD for Build & Test",
            "description": "Establish GitHub Actions workflows to automate the build and test processes for both the Next.js frontend and NestJS backend within the monorepo.",
            "dependencies": [],
            "details": "Create a `.github/workflows/ci.yml` file to define a workflow that triggers on push/PR, installs monorepo dependencies, builds both applications, and runs unit/integration tests for each.",
            "status": "pending",
            "testStrategy": "Push a commit to a feature branch and verify that the CI pipeline runs successfully, building both applications and passing all configured tests."
          },
          {
            "id": 5,
            "title": "Implement CI/CD for Automated Deployment",
            "description": "Extend the CI/CD pipeline to include automated deployment steps for both the Next.js frontend and NestJS backend, leveraging the production Docker images.",
            "dependencies": [],
            "details": "Add deployment jobs to the GitHub Actions workflow, potentially pushing built Docker images to a container registry and then deploying them to a target environment (e.g., a staging server or cloud platform).",
            "status": "pending",
            "testStrategy": "Trigger a deployment (e.g., on merge to main or a specific tag) and verify that the applications are successfully deployed and accessible in the target environment."
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement Google OAuth & JWT Authentication",
        "description": "Develop the user authentication system using Google OAuth 2.0 for sign-in and JWT for secure session management. This includes user registration/login flow and protected API routes.",
        "details": "Backend: NestJS, @nestjs/jwt, passport-google-oauth20. Frontend: Integrate Google login button, handle OAuth callback, store JWT securely. API: POST /auth/google, GET /auth/me.",
        "testStrategy": "Unit tests for JWT generation/validation. Integration tests for Google OAuth flow, successful user creation/login, and access to protected routes.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Backend Google OAuth Strategy & Token Exchange Endpoint",
            "description": "Implement the NestJS Passport Google OAuth strategy and create the backend endpoint (`POST /auth/google`) to receive the Google authorization code or ID token from the frontend, exchange it with Google for user data, and initiate the authentication process.",
            "dependencies": [],
            "details": "Configure `passport-google-oauth20`, define `GoogleStrategy`, create `POST /auth/google` endpoint to handle incoming Google tokens/codes and perform Google API calls for user info.",
            "status": "done",
            "testStrategy": "Unit tests for GoogleStrategy configuration and token exchange logic with mock Google responses."
          },
          {
            "id": 2,
            "title": "Backend JWT Generation & User Persistence",
            "description": "Develop the backend logic to generate JSON Web Tokens (JWT) upon successful Google authentication and persist user data in the database. This includes creating new user records or updating existing ones based on Google profile information.",
            "dependencies": [
              "2.1"
            ],
            "details": "Implement user service for `findOrCreate` based on Google profile (email, name, avatar), use `@nestjs/jwt` to sign and issue access tokens and refresh tokens. Define JWT payload structure.",
            "status": "done",
            "testStrategy": "Unit tests for JWT generation and validation logic, including token expiration and refresh token mechanisms. Unit tests for user creation/update logic."
          },
          {
            "id": 3,
            "title": "Frontend Google Sign-In Button & OAuth Flow Initiation",
            "description": "Integrate the Google Sign-In button into the frontend UI and implement the client-side logic to initiate the Google OAuth flow, obtaining the necessary authorization code or ID token from Google.",
            "dependencies": [],
            "details": "Integrate Google Identity Services JS SDK (or similar), display Google login button on the sign-in page, configure client-side OAuth flow to get authorization code or ID token upon user consent.",
            "status": "done",
            "testStrategy": "Manual testing of Google login button display and initial OAuth redirect/popup functionality. Verify successful acquisition of Google token/code."
          },
          {
            "id": 4,
            "title": "Frontend Token Transmission, Storage & API Integration",
            "description": "Implement the frontend logic to send the obtained Google token/code to the backend's authentication endpoint (`POST /auth/google`), securely store the received JWT, and configure the application to include this token in headers for all subsequent authenticated API requests.",
            "dependencies": [
              "2.1",
              "2.2",
              "2.3"
            ],
            "details": "Send Google token/code to `POST /auth/google` endpoint. Securely store the returned JWT (e.g., HttpOnly cookies, localStorage with appropriate security measures). Implement an Axios interceptor or similar to attach the JWT to `Authorization: Bearer <token>` header for all authenticated API calls.",
            "status": "done",
            "testStrategy": "Integration tests to verify successful token transmission to backend, secure storage of JWT, and correct inclusion of JWT in subsequent API requests. Test token refresh if applicable."
          },
          {
            "id": 5,
            "title": "Backend Protected Routes & Session Validation Endpoint",
            "description": "Implement JWT authentication guards on the backend to protect specific API routes and develop an endpoint (`GET /auth/me`) to validate the current user's session and retrieve their profile information based on the provided JWT.",
            "dependencies": [
              "2.2",
              "2.4"
            ],
            "details": "Create NestJS `AuthGuard` using `@nestjs/jwt` to validate incoming JWTs. Apply guards to routes requiring authentication, including `GET /auth/me` to return authenticated user details. Implement error handling for invalid or expired tokens.",
            "status": "done",
            "testStrategy": "Integration tests for successful access to protected routes using a valid JWT. Integration tests for rejection of requests with invalid, expired, or missing tokens. Unit tests for `AuthGuard` logic."
          }
        ]
      },
      {
        "id": 3,
        "title": "Design & Implement Core Data Models (PostgreSQL, TypeORM)",
        "description": "Set up PostgreSQL database, configure TypeORM, and define the initial core data models: User, Task, and Project entities with their respective relationships and fields as specified in the PRD.",
        "details": "Database: PostgreSQL. ORM: TypeORM. Entities: User (id, email, profile, xp, level, createdAt), Task (id, title, description, status, project_id, assignee_id), Project (id, title, members, workspace_id?). Migrations: Create initial database schema migrations.",
        "testStrategy": "Unit tests for TypeORM entities and repositories. Integration tests to verify successful database connection, schema creation, and basic CRUD operations for each entity.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up PostgreSQL Database",
            "description": "Install and configure a local PostgreSQL instance, create the necessary database, and ensure it's accessible for connection.",
            "dependencies": [],
            "details": "Install PostgreSQL. Create a dedicated database (e.g., `task_manager_db`). Configure user credentials and permissions.",
            "status": "done",
            "testStrategy": "Manually verify database accessibility using a client tool (e.g., `psql`, DBeaver) and ensure connection can be established."
          },
          {
            "id": 2,
            "title": "Configure TypeORM and Database Connection",
            "description": "Install TypeORM and related packages, set up the `DataSource` configuration, and establish the initial connection to the PostgreSQL database from the application.",
            "dependencies": [
              "3.1"
            ],
            "details": "Install `typeorm`, `@nestjs/typeorm`, `pg`. Create `data-source.ts` or `ormconfig.ts` with connection details. Integrate `TypeOrmModule.forRoot()` in NestJS application module.",
            "status": "done",
            "testStrategy": "Integration test to verify successful database connection on application startup and TypeORM initialization."
          },
          {
            "id": 3,
            "title": "Define User and Project Entities with Basic Fields",
            "description": "Create the TypeORM `User` entity (id, email, profile, xp, level, createdAt) and `Project` entity (id, title, members, workspace_id?) with their basic fields and primary keys.",
            "dependencies": [
              "3.2"
            ],
            "details": "Implement `@Entity()`, `@PrimaryGeneratedColumn()`, and `@Column()` decorators for User and Project entities. Define appropriate data types for each field.",
            "status": "done",
            "testStrategy": "Unit tests for User and Project entity structures, ensuring correct column mapping and primary key definition."
          },
          {
            "id": 4,
            "title": "Define Task Entity and Establish All Entity Relationships",
            "description": "Create the TypeORM `Task` entity (id, title, description, status, project_id, assignee_id) and define all necessary relationships between User, Task, and Project entities (e.g., Task to Project, Task to User (assignee), Project to User (members)).",
            "dependencies": [
              "3.2",
              "3.3"
            ],
            "details": "Implement `@ManyToOne()`, `@OneToMany()`, `@ManyToMany()`, `@JoinColumn()`, and `@JoinTable()` decorators to establish foreign key relationships and many-to-many associations (e.g., Project members).",
            "status": "done",
            "testStrategy": "Unit tests for Task entity structure and all defined relationships. Integration tests to verify relationship loading and cascading behavior (if applicable)."
          },
          {
            "id": 5,
            "title": "Generate and Apply Initial Database Migrations",
            "description": "Generate the initial TypeORM migration script based on the defined entities and apply it to the PostgreSQL database to create the schema.",
            "dependencies": [
              "3.2",
              "3.3",
              "3.4"
            ],
            "details": "Use TypeORM CLI commands (`typeorm migration:generate`, `typeorm migration:run`) to create and apply the initial schema. Ensure all tables and relationships are correctly generated.",
            "status": "done",
            "testStrategy": "Integration tests to verify successful schema creation after migration. Perform basic CRUD operations for each entity to confirm table and column integrity."
          }
        ]
      },
      {
        "id": 4,
        "title": "Configure Socket.io for Real-time Updates",
        "description": "Set up and configure Socket.io on the NestJS backend and integrate it with the Next.js frontend to enable real-time communication channels for chat and general application updates.",
        "details": "Backend: NestJS, socket.io. Frontend: Socket.io client integration. Initial events: project:join, project:leave.",
        "testStrategy": "Unit tests for Socket.io event handlers. Integration tests to verify successful WebSocket connection, joining/leaving channels, and basic message exchange.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Develop Core UI/UX & Mobile-First Layout",
        "description": "Implement the foundational UI/UX elements including global styles using Tailwind CSS, responsive layout for mobile-first design, navigation components (header, sidebar), and a consistent visual language.",
        "details": "Framework: Next.js 14+ (App Router). Styling: Tailwind CSS. UI Components: Headless UI + custom components for basic layout, buttons, inputs. Principles: Progressive disclosure, consistency, immediate feedback, mobile-first.",
        "testStrategy": "Visual regression tests for key pages. Manual testing across various screen sizes and devices to ensure responsiveness and usability.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Setup Tailwind CSS & Global Styles",
            "description": "Configure Tailwind CSS in the Next.js project, define base styles, typography, color palette, and any global CSS resets or utility classes. Establish the initial `layout.tsx` for the root application structure.",
            "dependencies": [],
            "details": "Framework: Next.js 14+ (App Router). Styling: Tailwind CSS configuration (`tailwind.config.js`, `globals.css`). Initial `layout.tsx` setup.",
            "status": "done",
            "testStrategy": "Verify Tailwind classes are applied correctly; inspect global styles and typography in browser developer tools."
          },
          {
            "id": 2,
            "title": "Implement Mobile-First Responsive Layout Structure",
            "description": "Design and implement the core responsive layout using CSS Grid or Flexbox, ensuring a mobile-first approach. This includes defining breakpoints and creating a flexible container system that adapts to various screen sizes.",
            "dependencies": [
              "5.1"
            ],
            "details": "Next.js layout components. Utilize Tailwind's responsive utility classes (e.g., `sm:`, `md:`, `lg:`). Focus on `min-width` breakpoints for mobile-first design.",
            "status": "done",
            "testStrategy": "Manual testing across various screen sizes (mobile, tablet, desktop) using browser developer tools and device emulation to ensure layout responsiveness."
          },
          {
            "id": 3,
            "title": "Develop Header & Sidebar Navigation Components",
            "description": "Create the primary navigation components: a responsive header (top bar) and a collapsible/expandable sidebar. These components should integrate with the mobile-first layout and provide consistent navigation across the application.",
            "dependencies": [
              "5.2"
            ],
            "details": "Next.js components for Header and Sidebar. Styling with Tailwind CSS. Utilize Headless UI components (e.g., Disclosure for sidebar toggle) for accessibility and interactivity.",
            "status": "done",
            "testStrategy": "Manual testing of navigation links, responsiveness of header/sidebar across breakpoints, and accessibility features (keyboard navigation, ARIA attributes)."
          },
          {
            "id": 4,
            "title": "Build Core UI Elements (Buttons, Inputs, Forms)",
            "description": "Develop a set of foundational, reusable UI components such as buttons, text inputs, text areas, and basic form structures. These components should adhere to the defined visual language and be styled consistently using Tailwind CSS.",
            "dependencies": [
              "5.1"
            ],
            "details": "Next.js components for `Button`, `Input`, `Textarea`. Styling with Tailwind CSS. Ensure consistency in states (hover, focus, active, disabled). Consider Headless UI for accessibility where applicable.",
            "status": "done",
            "testStrategy": "Visual inspection of components for consistency across different states. Manual testing of interactive elements for correct behavior and accessibility."
          },
          {
            "id": 5,
            "title": "Integrate & Refine Visual Language & Accessibility",
            "description": "Integrate all developed UI components and navigation into a cohesive visual system. Conduct a thorough review to ensure consistency in visual language, adherence to mobile-first principles, and basic accessibility standards (e.g., focus states, semantic HTML).",
            "dependencies": [
              "5.3",
              "5.4"
            ],
            "details": "Review and refine global styles, component usage, and layout structures. Focus on `layout.tsx` and `page.tsx` files. Implement any necessary accessibility improvements.",
            "status": "done",
            "testStrategy": "Visual regression tests for key pages (if setup). Manual testing across various screen sizes and devices to ensure responsiveness and usability. Basic accessibility audit using browser extensions (e.g., Lighthouse, Axe DevTools)."
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement User Profile & XP/Level System",
        "description": "Develop the user profile page to display XP and level. Implement the backend logic to award XP for positive actions (e.g., task completion) and calculate level progression based on accumulated XP.",
        "details": "Backend: Update User model with xp, level fields. Logic for xp:gained event. Frontend: User profile UI, display XP bar and current level. Gamification: XP acquisition for '일일 업무 완료' (10 XP).",
        "testStrategy": "Unit tests for XP calculation and level-up logic. Integration tests to verify XP gain upon task completion and correct profile display.",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Develop GTD-based Task Management System",
        "description": "Implement the full GTD 5-step sequential process for task creation. Develop CRUD operations for tasks and implement smart filtering for 'Today', 'Completed', and 'All' tasks.",
        "details": "Backend: POST /tasks (GTD flow), GET /tasks (filtering), PUT /tasks/:id, DELETE /tasks/:id. Frontend: UI for GTD task creation wizard, task list display, and filter toggles. Task fields: id, title, description, status, priority, project_id, assignee_id, due_date.",
        "testStrategy": "Unit tests for task service logic. Integration tests for all task API endpoints, ensuring correct data persistence and filtering. End-to-end tests for the GTD creation flow.",
        "priority": "high",
        "dependencies": [
          3,
          5
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Core Task Data Model & Basic CRUD Backend",
            "description": "Define the task data model with specified fields and implement the backend API endpoints for updating (PUT), deleting (DELETE), and retrieving all tasks (GET without specific filters). This forms the foundational layer for task management.",
            "dependencies": [],
            "details": "Backend: Define task schema/model (id, title, description, status, priority, project_id, assignee_id, due_date). Implement PUT /tasks/:id for updating task details, DELETE /tasks/:id for removing tasks, and a basic GET /tasks endpoint to retrieve all tasks without specific filtering logic.",
            "status": "done",
            "testStrategy": "Unit tests for task service logic (update, delete, retrieve all). Integration tests for PUT /tasks/:id, DELETE /tasks/:id, and basic GET /tasks endpoints, ensuring correct data persistence and retrieval."
          },
          {
            "id": 2,
            "title": "Develop GTD 5-Step Task Creation Backend",
            "description": "Implement the backend logic for the Getting Things Done (GTD) 5-step sequential process for task creation, handling the initial intake and processing of new tasks.",
            "dependencies": [
              "7.1"
            ],
            "details": "Backend: Implement the POST /tasks endpoint to encapsulate the GTD 5-step flow (Capture, Clarify, Organize, Reflect, Engage). This involves processing incoming task data, assigning initial status/priority based on GTD principles, and persisting the task.",
            "status": "done",
            "testStrategy": "Unit tests for the GTD processing logic within the task service. Integration tests for the POST /tasks endpoint, ensuring correct task creation and adherence to GTD principles."
          },
          {
            "id": 3,
            "title": "Implement Smart Task Filtering Backend",
            "description": "Enhance the backend task retrieval API to support smart filtering for 'Today', 'Completed', and 'All' tasks, providing the necessary data for the frontend display.",
            "dependencies": [
              "7.1"
            ],
            "details": "Backend: Extend the GET /tasks endpoint to accept query parameters for filtering tasks by 'Today' (tasks due today or overdue), 'Completed' (tasks with status 'completed'), and 'All' (all tasks, default). This requires logic to interpret due_date and status fields.",
            "status": "done",
            "testStrategy": "Integration tests for the GET /tasks endpoint with various filter parameters, ensuring accurate retrieval of 'Today', 'Completed', and 'All' tasks."
          },
          {
            "id": 4,
            "title": "Develop GTD Task Creation Frontend Wizard",
            "description": "Create the user interface for the GTD 5-step sequential task creation process, guiding the user through capturing and processing new tasks.",
            "dependencies": [
              "7.2"
            ],
            "details": "Frontend: Develop a multi-step UI wizard for task creation, aligning with the GTD 5-step process. This includes input fields for title, description, and potentially guiding questions for clarification, organization, etc., culminating in a call to the POST /tasks API.",
            "status": "done",
            "testStrategy": "End-to-end tests for the GTD creation flow, verifying user interaction, data submission, and successful task creation."
          },
          {
            "id": 5,
            "title": "Develop Task List Display & Filtering Frontend",
            "description": "Build the frontend UI to display the list of tasks and provide interactive toggles for 'Today', 'Completed', and 'All' smart filters.",
            "dependencies": [
              "7.1",
              "7.3"
            ],
            "details": "Frontend: Implement the task list display component, rendering tasks retrieved from the GET /tasks API. Develop UI elements (buttons/toggles) for 'Today', 'Completed', and 'All' filters, which trigger calls to the filtered GET /tasks endpoint and update the displayed list.",
            "status": "done",
            "testStrategy": "End-to-end tests for the task list display and filter toggles, ensuring correct task rendering and accurate filtering based on user selection."
          }
        ]
      },
      {
        "id": 8,
        "title": "Implement Project Creation & Basic Collaboration",
        "description": "Enable users to create new projects, manage project details, and invite/manage members. This includes basic project listing and viewing.",
        "details": "Backend: POST /projects, GET /projects, PUT /projects/:id. Frontend: UI for project creation form, project list, and project detail view. Project fields: id, title, objectives[], key_results[], members[].",
        "testStrategy": "Unit tests for project service logic. Integration tests for project API endpoints. End-to-end tests for project creation and member management.",
        "priority": "medium",
        "dependencies": [
          3,
          5
        ],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Develop Core Project API & Data Model",
            "description": "Implement backend endpoints for creating, retrieving (list and single), and updating project core details (title, objectives, key results). Define the project data model.",
            "dependencies": [],
            "details": "Backend: POST /projects, GET /projects, GET /projects/:id, PUT /projects/:id (for core fields). Project fields: id, title, objectives[], key_results[].",
            "status": "done",
            "testStrategy": "Unit tests for project service logic. Integration tests for project API endpoints (CRUD for core fields)."
          },
          {
            "id": 2,
            "title": "Implement Project Listing & Creation UI",
            "description": "Develop the frontend UI for displaying a list of projects and a form for creating new projects.",
            "dependencies": [],
            "details": "Frontend: UI for project list (GET /projects) and project creation form (POST /projects).",
            "status": "done",
            "testStrategy": "End-to-end tests for project creation flow and project list display."
          },
          {
            "id": 3,
            "title": "Implement Project Detail & Editing UI",
            "description": "Develop the frontend UI for viewing detailed project information and editing existing project details.",
            "dependencies": [],
            "details": "Frontend: UI for project detail view (GET /projects/:id) and project editing form (PUT /projects/:id).",
            "status": "done",
            "testStrategy": "End-to-end tests for project detail viewing and editing flow."
          },
          {
            "id": 4,
            "title": "Develop Project Member Management Backend",
            "description": "Implement backend logic and API endpoints to add, remove, and manage members associated with a project. This includes updating the members[] field.",
            "dependencies": [],
            "details": "Backend: Extend PUT /projects/:id or add new endpoints (e.g., POST /projects/:id/members, DELETE /projects/:id/members/:memberId) to manage the members[] array. This involves linking users (from Task 2) to projects.",
            "status": "done",
            "testStrategy": "Unit tests for member management logic. Integration tests for member management API endpoints."
          },
          {
            "id": 5,
            "title": "Implement Project Member Management UI",
            "description": "Develop the frontend UI within the project detail view to invite, list, and manage project members.",
            "dependencies": [],
            "details": "Frontend: UI components for inviting new members, displaying current members, and removing members within the project detail view.",
            "status": "done",
            "testStrategy": "End-to-end tests for inviting and managing project members."
          }
        ]
      },
      {
        "id": 9,
        "title": "Develop Real-time Project Chat with Slash Commands",
        "description": "Integrate real-time chat functionality within project channels using Socket.io. Implement basic slash commands like /add-task to create tasks directly from chat.",
        "details": "Backend: Socket.io event handling for project:message. Logic to parse /add-task command and create a task via the task service. Frontend: Chat UI within project view, message input, display of real-time messages. API: GET /projects/:id/chat for message history.",
        "testStrategy": "Integration tests for real-time message delivery and display. End-to-end tests for /add-task command functionality.",
        "priority": "medium",
        "dependencies": [
          4,
          7,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Momentum Score & Advanced Task Filtering",
        "description": "Develop the RICE model-based momentum score algorithm for automatic task prioritization. Extend task filtering to include 'Later' and intuitive search across all projects.",
        "details": "Backend: Algorithm for momentum_score calculation (RICE model: Reach, Impact, Confidence, Effort). Update Task model. Frontend: Display momentum score on tasks, implement 'Later' filter and global search input. API: Enhance GET /tasks with sorting by momentum score and search capabilities.",
        "testStrategy": "Unit tests for momentum score calculation logic. Integration tests for advanced filtering and search queries.",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Integrate Google Calendar for Due Date Sync",
        "description": "Implement the integration with Google Calendar API to synchronize task due dates, allowing users to see their Workly tasks directly in their Google Calendar.",
        "details": "Backend: Google Calendar API integration for creating/updating events. Frontend: UI for connecting Google Calendar account and enabling sync. Scope: One-way sync from Workly to Google Calendar for task due dates.",
        "testStrategy": "Integration tests for successful authentication with Google Calendar API and correct event creation/update.",
        "priority": "low",
        "dependencies": [
          2,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Establish Comprehensive Testing & Monitoring",
        "description": "Implement a robust testing suite including unit, integration, and end-to-end tests for critical functionalities. Set up Sentry for error tracking and establish basic application performance monitoring.",
        "details": "Testing Frameworks: Jest (unit/integration), Playwright/Cypress (E2E). Monitoring: Sentry DSN configuration, basic logging. Coverage: Aim for high test coverage on core logic.",
        "testStrategy": "Run all test suites. Verify Sentry error reporting for simulated errors.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implement Notion-Style Task Detail Modal with Markdown Editor",
        "description": "Develop a comprehensive task detail view within a Notion-style modal, featuring a markdown editor for descriptions, checklists, task relationships, wiki references, and time management functionalities.",
        "details": "Frontend:\n- Create a reusable modal component for displaying and editing task details, adhering to a Notion-style aesthetic.\n- Integrate a markdown editor (evaluate MDXEditor or @uiw/react-md-editor for features, performance, and ease of use) for the task description field.\n- Implement dedicated UI components for:\n  - Checklists: Allow adding, editing, deleting, and marking checklist items as complete.\n  - Task Relationships: Enable linking tasks (e.g., parent/child, blocking/blocked by, related) with a task search/picker.\n  - Wiki References: Provide fields for adding and displaying links to external wiki pages or internal documentation.\n  - Time Management: Include functionalities for estimated time, logged time, and potentially a simple time tracking mechanism (start/stop).\n- Ensure data binding and debounced saving for all editable fields to provide a smooth user experience.\n- Focus on responsive design and accessibility for the modal and its contents.\n\nBackend (API Extensions):\n- Extend the existing Task data model to accommodate new fields:\n  - `description_markdown`: String for markdown content.\n  - `checklist`: Array of objects (e.g., `{id: string, text: string, completed: boolean}`).\n  - `relationships`: Array of objects (e.g., `{target_task_id: number, type: 'parent' | 'subtask' | 'blocks' | 'related'}`).\n  - `wiki_references`: Array of objects (e.g., `{title: string, url: string}`).\n  - `estimated_time_minutes`: Number.\n  - `logged_time_minutes`: Number.\n- Enhance `GET /tasks/:id` to return all new detailed fields.\n- Implement/extend `PUT /tasks/:id` to allow updating all new detailed fields, ensuring proper validation and data integrity.",
        "testStrategy": "Unit Tests:\n- Test the markdown editor component's rendering, input handling, and content parsing.\n- Verify the logic for adding, removing, and toggling checklist items.\n- Test the task relationship component's ability to add/remove links and handle invalid task IDs.\n- Test time management component's input validation and calculation logic.\n\nIntegration Tests:\n- Verify that `GET /tasks/:id` successfully retrieves tasks with all new detailed fields (markdown, checklist, relationships, time data).\n- Confirm that `PUT /tasks/:id` correctly updates all new detailed fields in the database and that changes persist.\n- Test the interaction between the frontend components and the backend API for saving and loading data.\n\nEnd-to-End Tests (using Playwright/Cypress):\n- Open the task detail modal for an existing task and verify its Notion-style appearance.\n- Edit the markdown description, add/remove checklist items, establish task relationships, and log time.\n- Save the changes and verify they are correctly displayed upon re-opening the modal or refreshing the page.\n- Test various scenarios: empty fields, large markdown content, multiple checklist items, and complex relationship structures.\n- Verify the modal's opening/closing animations and overall user experience.",
        "status": "done",
        "dependencies": [
          8
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Notion-Style Task Detail Modal UI",
            "description": "Create the foundational reusable modal component for displaying task details, adhering to a Notion-style aesthetic, focusing on responsive design and accessibility. [Updated: 8/2/2025]",
            "dependencies": [],
            "details": "Create a reusable modal component for displaying and editing task details, adhering to a Notion-style aesthetic. Ensure responsive design and accessibility for the modal and its contents.\n<info added on 2025-08-01T15:20:44.829Z>\nTypeScript type definitions have been completed. Implementation of the modal component has started, focusing on the basic layout and a full-screen toggle feature.\n</info added on 2025-08-01T15:20:44.829Z>",
            "status": "done",
            "testStrategy": "Unit tests for modal rendering, opening/closing behavior, and responsiveness."
          },
          {
            "id": 2,
            "title": "Integrate Markdown Editor for Task Description",
            "description": "Integrate a chosen markdown editor into the task description field within the Notion-style modal.",
            "dependencies": [
              "13.1"
            ],
            "details": "Integrate a markdown editor (evaluate MDXEditor or @uiw/react-md-editor for features, performance, and ease of use) for the task description field.",
            "status": "done",
            "testStrategy": "Unit tests for the markdown editor component's rendering, input handling, and content parsing."
          },
          {
            "id": 3,
            "title": "Implement Checklist Functionality",
            "description": "Develop dedicated UI components and logic for adding, editing, deleting, and marking checklist items as complete within the task detail modal.",
            "dependencies": [
              "13.1"
            ],
            "details": "Implement dedicated UI components for Checklists: Allow adding, editing, deleting, and marking checklist items as complete.",
            "status": "done",
            "testStrategy": "Unit tests for the logic for adding, removing, and toggling checklist items."
          },
          {
            "id": 4,
            "title": "Implement Task Relationship Management",
            "description": "Develop UI components and logic to enable linking tasks (e.g., parent/child, blocking/blocked by, related) with a task search/picker within the modal.",
            "dependencies": [
              "13.1"
            ],
            "details": "Implement dedicated UI components for Task Relationships: Enable linking tasks (e.g., parent/child, blocking/blocked by, related) with a task search/picker.",
            "status": "done",
            "testStrategy": "Unit tests for the task relationship component's ability to add/remove links and handle invalid task IDs."
          },
          {
            "id": 5,
            "title": "Implement Time Management Features",
            "description": "Develop UI components for estimated time, logged time, and potentially a simple time tracking mechanism within the task detail modal.",
            "dependencies": [
              "13.1"
            ],
            "details": "Implement dedicated UI components for Time Management: Include functionalities for estimated time, logged time, and potentially a simple time tracking mechanism (start/stop).",
            "status": "done",
            "testStrategy": "Unit tests for time management component's input validation and display logic."
          },
          {
            "id": 6,
            "title": "Implement Wiki References Management",
            "description": "Develop UI components for adding and displaying links to external wiki pages or internal documentation within the task detail modal.",
            "dependencies": [
              "13.1"
            ],
            "details": "Implement dedicated UI components for Wiki References: Provide fields for adding and displaying links to external wiki pages or internal documentation.",
            "status": "done",
            "testStrategy": "Unit tests for wiki reference component's input handling and link display."
          },
          {
            "id": 7,
            "title": "Extend Task Data Model and API",
            "description": "Extend the backend Task data model to accommodate new fields for description, checklists, relationships, wiki references, and time management, and update the API endpoints for retrieval and update.",
            "dependencies": [],
            "details": "Extend the existing Task data model to accommodate new fields: `description_markdown`, `checklist`, `relationships`, `wiki_references`, `estimated_time_minutes`, `logged_time_minutes`. Enhance `GET /tasks/:id` to return all new detailed fields. Implement/extend `PUT /tasks/:id` to allow updating all new detailed fields, ensuring proper validation and data integrity.",
            "status": "done",
            "testStrategy": "Unit tests for data model validation and API endpoint logic. Integration tests for data persistence and retrieval."
          },
          {
            "id": 8,
            "title": "Integrate Frontend with Backend and Conduct Comprehensive Testing",
            "description": "Connect all implemented frontend UI components with the extended backend API, ensuring data binding, debounced saving, and conducting comprehensive integration and end-to-end tests.",
            "dependencies": [
              "13.2",
              "13.3",
              "13.4",
              "13.5",
              "13.6",
              "13.7"
            ],
            "details": "Ensure data binding and debounced saving for all editable fields to provide a smooth user experience. Conduct comprehensive integration tests to ensure all implemented features work correctly with the backend API for data persistence and retrieval.",
            "status": "done",
            "testStrategy": "End-to-end tests for the entire task detail modal flow, including data creation, update, and retrieval. Verify debounced saving and data integrity across sessions."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-25T13:37:36.448Z",
      "updated": "2025-08-02T07:23:05.526Z",
      "description": "Tasks for master context"
    }
  }
}