<context>
# Overview  
워클리(Workly)는 게이미피케이션 기반 생산성 생태계로서, 개인의 업무 관리, 팀 협업, 전문적 성장을 하나의 통합된 플랫폼에서 제공합니다. Threads 스타일의 미니멀한 UI/UX를 기반으로 하여, GTD(Getting Things Done) 방법론과 깊이 있는 게이미피케이션을 결합해 사용자의 지속적인 참여와 성장을 유도합니다.

이 제품은 기존 생산성 도구들의 기능적 접근을 넘어서, 사용자가 자신의 전문적 여정을 '플레이'하며 성취를 통해 성장할 수 있는 새로운 패러다임을 제시합니다. 

# Core Features  
## 1. 지능형 업무 관리 (홈)
- **GTD 기반 업무 생성**: 5단계 순차적 프로세스로 브레인 덤프에서 실행까지
- **모멘텀 점수 알고리즘**: RICE 모델 기반 우선순위 자동 정렬
- **스마트 필터링**: '오늘', '완료됨', '전체', '나중에 할 일' 보기
- **직관적 검색**: 전체 프로젝트 통합 검색

## 2. 채팅 우선 프로젝트 관리
- **실시간 협업**: Slack 스타일 영구 채팅 채널
- **슬래시 명령어**: /add-task, /delegate, /set-milestone 등 생산성 명령
- **OKR 기반 목표 설정**: 목표-핵심결과 구조로 명확한 성과 측정
- **팀 구성 시스템**: Upwork 스타일 모집 및 기술 매칭

## 3. 포괄적 게이미피케이션
- **XP & 레벨 시스템**: 모든 긍정적 행동에 대한 보상
- **스킬 트리**: 전문 분야별 역량 시각화 및 성장 추적
- **업적 & 배지**: 특정 마일스톤 달성 보상
- **평판 시스템**: Stack Overflow 스타일 커뮤니티 신뢰도
- **시즌제**: 분기별 테마와 독점 보상이 있는 참여 주기

## 4. 생태계 허브 (게시판)
- **지식 위키**: 사용자 생성 튜토리얼 및 모범 사례 가이드
- **프로젝트 쇼케이스**: Behance 스타일 포트폴리오 공유 공간
- **임무 마켓플레이스**: 유료 프리랜스 업무 플랫폼 (향후 구현)

## 5. 워크스페이스 (B2B)
- **팀 관리**: 중앙집중식 멤버 관리 및 권한 설정
- **비공개 프로젝트**: 조직 내부 전용 협업 공간
- **팀 분석**: 생산성 및 성과 대시보드
- **엔터프라이즈 보안**: SSO, 감사 로그, 규정 준수

# User Experience  
## 핵심 사용자 페르소나
1. **개인 생산성 추구자**: 업무 관리와 개인 성장을 원하는 전문가
2. **스타트업 팀**: 민첩한 협업과 동기부여가 필요한 소규모 팀
3. **프리랜서/크리에이터**: 포트폴리오 구축과 수익 창출 기회를 찾는 개인
4. **엔터프라이즈**: 게이미피케이션으로 팀 참여도를 높이려는 조직

## 핵심 사용자 여정
### 온보딩 (첫 5분)
1. **Google 로그인**: 단일 '구글로 시작하기' 버튼
2. **환영 화면**: 핵심 가치 제안 간결 소개  
3. **첫 업무 생성**: 가이드된 GTD 프로세스 체험
4. **아하! 모멘트**: 우선순위 정렬된 홈 화면에서 즉시 가치 확인

### 일일 워크플로우
1. **홈 화면 확인**: 모멘텀 점수 기반 우선순위 업무 검토
2. **업무 실행**: 체크 완료 시 XP 획득 및 진행률 피드백
3. **프로젝트 협업**: 채팅을 통한 자연스러운 팀 커뮤니케이션
4. **성장 추적**: 스킬 트리 레벨업 및 업적 달성 확인

### UI/UX 핵심 원칙
- **점진적 공개**: 핵심 행동은 단순하게, 고급 기능은 직관적으로 접근 가능
- **일관성**: 플랫폼 관례 준수 및 통일된 시각적 언어
- **즉각적 피드백**: 모든 사용자 행동에 대한 마이크로인터랙션
- **모바일 우선**: 전체 화면 활용 및 터치 최적화
</context>

<PRD>
# Technical Architecture  
## 시스템 컴포넌트
### Frontend
- **Framework**: Next.js 14+ (App Router)
- **언어**: TypeScript (타입 안전성)
- **스타일링**: Tailwind CSS (유틸리티 우선)
- **상태 관리**: Zustand (경량 상태 관리)
- **UI 컴포넌트**: Headless UI + 커스텀 컴포넌트

### Backend  
- **Framework**: NestJS (확장 가능한 Node.js)
- **데이터베이스**: PostgreSQL (관계형 데이터)
- **ORM**: TypeORM (TypeScript 통합)
- **실시간**: Socket.io (채팅 및 실시간 업데이트)
- **인증**: JWT + Google OAuth 2.0

### 인프라
- **배포**: Docker + Docker Compose (개발/프로덕션)
- **파일 저장**: AWS S3 (이미지, 문서)
- **CDN**: CloudFront (글로벌 콘텐츠 배포)
- **모니터링**: Sentry (오류 추적)

## 데이터 모델
### 핵심 엔티티
```typescript
// 사용자
User {
  id, email, profile, xp, level, skills[], reputation, 
  workspaceId?, role, preferences, createdAt
}

// 업무
Task {
  id, title, description, status, priority, momentum_score,
  project_id, assignee_id, due_date, xp_reward, tags[]
}

// 프로젝트  
Project {
  id, title, objectives[], key_results[], 
  members[], chat_messages[], privacy, workspace_id?
}

// 게이미피케이션
Achievement {
  id, name, description, xp_reward, badge_icon, 
  unlock_criteria, rarity
}

SkillTree {
  user_id, skill_name, level, progress_xp, 
  total_xp_required, unlock_achievements[]
}
```

## API 설계
### RESTful Endpoints
```
# 인증
POST /auth/google - Google OAuth 로그인
GET /auth/me - 현재 사용자 정보

# 업무 관리
GET /tasks - 사용자 업무 목록 (필터링 지원)
POST /tasks - 새 업무 생성 (GTD 단계별)
PUT /tasks/:id - 업무 상태/내용 업데이트
DELETE /tasks/:id - 업무 삭제

# 프로젝트
GET /projects - 사용자 참여 프로젝트
POST /projects - 새 프로젝트 생성
PUT /projects/:id - 프로젝트 업데이트
GET /projects/:id/chat - 채팅 메시지 조회

# 게이미피케이션
GET /users/:id/profile - 사용자 프로필 (XP, 스킬 등)
POST /achievements/unlock - 업적 달성 처리
GET /leaderboards - 리더보드 조회
```

### WebSocket Events
```
# 실시간 채팅
project:message - 프로젝트 채팅 메시지
project:join - 프로젝트 채널 참여
project:leave - 프로젝트 채널 퇴장

# 실시간 업데이트
task:updated - 업무 상태 변경
xp:gained - XP 획득 알림
achievement:unlocked - 업적 달성 알림
```

## 통합 요구사항
- **Google Calendar API**: 마감일 동기화
- **Slack API**: 알림 및 업무 생성 (향후)
- **GitHub API**: 커밋-업무 연결 (향후)
- **결제 시스템**: Stripe (B2B 구독, 임무 마켓플레이스)

# Development Roadmap  
## Phase 1: MVP Core (3개월)
### 필수 기능 (Must-have)
1. **사용자 인증**: Google OAuth 통합
2. **홈 - 업무 관리**: 
   - GTD 기반 업무 생성 플로우
   - 기본 우선순위 정렬 (모멘텀 점수 v1)
   - 완료/미완료 필터링
3. **프로젝트 - 기본 협업**:
   - 프로젝트 생성/관리
   - 실시간 채팅 시스템
   - 기본 슬래시 명령어 (/add-task)
4. **프로필 - 기본 게이미피케이션**:
   - XP/레벨 시스템
   - 기본 대시보드
5. **설정**: 다크모드, 언어 설정, 알림 제어

### 기술적 목표
- 완전한 풀스택 아키텍처 구축
- 모바일 우선 반응형 디자인 완성
- 기본 실시간 기능 구현
- CI/CD 파이프라인 설정

## Phase 2: 게이미피케이션 확장 (2개월)
### 추가 기능 (Should-have)
1. **고급 게이미피케이션**:
   - 업적/배지 시스템
   - 스킬 트리 v1 (핵심 기술 5개)
   - 기본 평판 시스템
2. **지식 위키**:
   - 마크다운 기반 문서 작성
   - 태그 및 검색 시스템
   - 기본 큐레이션 기능
3. **외부 통합**:
   - Google Calendar 동기화
   - 기본 알림 시스템

### 기술적 목표
- 복합 쿼리 성능 최적화
- 파일 업로드 시스템 구축
- 검색 엔진 통합 (Elasticsearch)

## Phase 3: 커뮤니티 & 확장 (3개월)
### 향후 기능 (Could-have)
1. **프로젝트 쇼케이스**: 
   - 포트폴리오 갤러리
   - 추천/평가 시스템
2. **팀 기능 확장**:
   - 고급 프로젝트 템플릿
   - 팀 분석 대시보드
3. **모바일 앱**: React Native 또는 Flutter
4. **고급 통합**: Slack, GitHub, Notion

## Phase 4: B2B & 수익화 (4개월)
### 엔터프라이즈 기능 (Won't-have 단기)
1. **워크스페이스 시스템**: 
   - 팀 관리 콘솔
   - 역할 기반 권한
   - 팀 전체 분석
2. **임무 마켓플레이스**: 
   - 프리랜스 업무 플랫폼
   - 결제 시스템 통합
   - 분쟁 해결 시스템
3. **시즌제 시스템**: 
   - 분기별 테마
   - 시즌 패스
   - 리더보드

# Logical Dependency Chain
## 개발 순서 및 종속성

### Foundation Layer (Week 1-4)
**필수 선행 작업 - 모든 후속 기능의 기반**
1. **인증 시스템**: Google OAuth + JWT (모든 기능의 전제조건)
2. **기본 데이터 모델**: User, Task, Project 엔티티 설계
3. **UI 기초**: 헤더, 네비게이션, 기본 레이아웃 컴포넌트
4. **실시간 인프라**: Socket.io 기본 설정

### Core Loop (Week 5-8)
**즉시 사용 가능한 가치 제공**
1. **업무 관리 (홈)**: 
   - 단순 CRUD → GTD 플로우 → 기본 정렬
   - 의존성: 인증, User/Task 모델
2. **기본 프로젝트**: 
   - 프로젝트 생성 → 멤버 초대 → 간단한 업무 할당
   - 의존성: 업무 관리, Project 모델

### Engagement Layer (Week 9-12)  
**사용자 유지를 위한 동기부여 시스템**
1. **기본 게이미피케이션**:
   - XP 적립 → 레벨 시스템 → 프로필 대시보드
   - 의존성: 업무 완료 이벤트, 사용자 프로필
2. **실시간 채팅**:
   - 프로젝트 채팅 → 슬래시 명령어 → 알림
   - 의존성: 프로젝트 시스템, 실시간 인프라

### 이후 단계별 확장
각 단계는 이전 단계의 안정성 확보 후 진행:
- **Week 13-16**: 고급 게이미피케이션 (업적, 스킬)
- **Week 17-20**: 커뮤니티 기능 (위키, 쇼케이스) 
- **Week 21+**: B2B 기능 (워크스페이스, 마켓플레이스)

## 점진적 가치 전달 전략
1. **Week 4**: 기본 업무 관리 앱으로 사용 가능
2. **Week 8**: 팀 협업 기능으로 소규모 그룹 유치
3. **Week 12**: 게이미피케이션으로 장기 사용자 확보
4. **Week 16+**: 커뮤니티 기능으로 네트워크 효과 창출

# Risks and Mitigations  
## 기술적 위험
### 1. 실시간 성능 문제
**위험**: Socket.io 동시 접속자 확장 한계
**완화**: 
- Redis 기반 메시지 브로커 도입
- 수평 확장 가능한 서버 아키텍처 설계
- 채팅 메시지 페이지네이션 및 캐싱

### 2. 데이터베이스 복잡성
**위험**: 게이미피케이션 로직으로 인한 복합 쿼리 성능 저하
**완화**:
- 읽기 전용 복제본으로 조회 성능 분산
- 레디스 캐싱으로 빈번한 계산 결과 저장
- 배치 작업으로 무거운 계산 비동기 처리

### 3. 모바일 성능
**위험**: 복잡한 게이미피케이션 UI로 인한 모바일 성능 저하
**완화**:
- Progressive Web App (PWA) 우선 개발
- 코드 분할 및 지연 로딩
- 네이티브 앱은 Phase 3 이후 검증된 기능만 포팅

## 제품/시장 위험
### 1. MVP 범위 과대 설정
**위험**: 모든 기능을 한번에 구현하려다 출시 지연
**완화**:
- 엄격한 MoSCoW 우선순위 준수  
- 2주 스프린트로 작은 단위 검증
- 사용자 피드백 기반 우선순위 재조정

### 2. 게이미피케이션 균형
**위험**: 보상 시스템 불균형으로 인한 사용자 이탈
**완화**:
- A/B 테스트로 XP/레벨 밸런스 조정
- 사용자 행동 분석으로 참여 패턴 모니터링
- 단계적 보상 시스템으로 점진적 조정 가능

### 3. 커뮤니티 활성화 실패
**위험**: 위키/쇼케이스 등 UGC 기능 사용률 저조
**완화**:
- 초기 고품질 시드 콘텐츠 플랫폼 직접 제공
- 얼리 어답터 대상 콘텐츠 기여 인센티브
- 큐레이션을 통한 품질 관리 및 발견 가능성 증대

## 비즈니스 위험
### 1. 경쟁사 대응
**위험**: 기존 대형 플랫폼의 게이미피케이션 기능 추가
**완화**:
- 핵심 차별점 (GTD + 게이미피케이션 통합)에 집중
- 커뮤니티 기반 방어막 구축
- 빠른 혁신 주기로 기능 우위 유지

### 2. 수익화 시점
**위험**: B2B 전환 시점 오판으로 인한 현금 흐름 문제
**완화**:
- 개인 사용자 MAU 10K+ 달성 후 B2B 진입
- 프리미엄 개인 요금제로 조기 수익화 테스트
- 시드 투자로 충분한 개발 버퍼 확보

# Appendix  
## 게이미피케이션 밸런스 설정
### XP 획득 기준표
- 일일 업무 완료: 10 XP
- 프로젝트 마일스톤: 100 XP  
- 프로젝트 완료: 250 XP
- 위키 문서 작성: 20 XP
- 쇼케이스 게시: 50 XP

### 레벨업 요구 XP (지수적 증가)
```
Level 1→2: 100 XP (누적 100)
Level 2→3: 150 XP (누적 250)  
Level 3→4: 225 XP (누적 475)
...
Level 10: 약 2,500 XP (일일 활성 사용자 기준 3-4개월)
```

## 기술 스택 상세
### 패키지 의존성
```json
{
  "frontend": {
    "next": "14.x",
    "typescript": "5.x", 
    "tailwindcss": "3.x",
    "zustand": "4.x",
    "@headlessui/react": "1.x"
  },
  "backend": {
    "@nestjs/core": "10.x",
    "typeorm": "0.3.x",
    "socket.io": "4.x",
    "@nestjs/jwt": "10.x",
    "passport-google-oauth20": "2.x"
  }
}
```

### 환경 설정
```env
# 개발 환경
DATABASE_URL=postgresql://localhost:5432/workly_dev
GOOGLE_CLIENT_ID=xxx
GOOGLE_CLIENT_SECRET=xxx
JWT_SECRET=xxx
REDIS_URL=redis://localhost:6379

# 프로덕션 추가
AWS_ACCESS_KEY_ID=xxx
AWS_SECRET_ACCESS_KEY=xxx  
SENTRY_DSN=xxx
```

## 사용자 연구 결과 (참고)
### 핵심 사용자 니즈
1. **명확한 우선순위**: "무엇을 먼저 해야 할지 모르겠어요"
2. **성취감**: "완료해도 허무해요, 성장이 보이지 않아요"  
3. **팀 소통**: "업무와 대화가 따로 놀아요"
4. **동기 부여**: "계속 사용할 이유가 부족해요"

### 경쟁 분석
- **Todoist**: 개인 중심, 게이미피케이션 부족
- **Asana**: 팀 중심, 개인 성장 지원 부족  
- **Habitica**: 게이미피케이션 강하나 협업 약함
- **Notion**: 유연하나 러닝 커브 높음

→ **워클리의 포지션**: "개인 성장과 팀 협업을 게이미피케이션으로 연결하는 유일한 플랫폼"
</PRD>